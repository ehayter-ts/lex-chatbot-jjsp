{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    systemName: \"AWS_Lex_ChatBot\",\n    displayName: \"AWS Lex ChatBot Broker\",\n    description: \"AWS Lex ChatBot Broker\",\n    configuration: {\n        \"AwsRegion\": {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            value: \"eu-west-2\"\n        },\n        \"BotName\": {\n            displayName: \"Bot Name\",\n            type: \"string\",\n            value: \"MedicalBotNHS\"\n        },\n        \"BotAlias\": {\n            displayName: \"Bot Name\",\n            type: \"string\",\n            value: \"latestversion\"\n        },\n        \"UserID\": {\n            displayName: \"User ID\",\n            type: \"string\",\n            value: \"AKIARXLDA4AZB24QPA72\"\n        }\n    }\n};\n\nvar crypto = require(\"crypto-js\");\n\nfunction getDateStamp()\n{\n    var date = new Date();\n\n    return date.getFullYear().toString() + ('0' + (date.getMonth()+1)).slice(-2).toString() + ('0' + date.getDate()).slice(-2);\n}\n\nfunction getSignatureKey() {\n    var kDate = crypto.HmacSHA256(getDateStamp(), \"AWS4\" + metadata.configuration[\"UserID\"]);\n    var kRegion = crypto.HmacSHA256(metadata.configuration[\"AwsRegion\"], kDate);\n    var kService = crypto.HmacSHA256(\"lex\", kRegion);\n    var kSigning = crypto.HmacSHA256(\"aws4_request\", kService);\n\n    return kSigning;\n}\n\nondescribe = async function({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"Message\": {\n                displayName: \"Message\",\n                description: \"Represents a text reply\",\n                properties: {\n                    \"inputText\": {\n                        displayName: \"Input Text\",\n                        type: \"string\"\n                    },\n                    \"outputText\": {\n                        displayName: \"Output Text\",\n                        type: \"string\"\n                    }\n                },\n                methods: {\n                    \"postText\": {\n                        displayName: \"Post Text\",\n                        type: \"execute\",\n                        inputs: [ \"inputText\" ],\n                        outputs: [ \"outputText\" ]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\n    switch (objectName)\n    {\n        case \"message\": await onexecuteMessage(methodName, properties, parameters, configuration); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteMessage(methodName: string, properties: SingleRecord, parameters: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case \"postText\": await onexecutePostText(properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecutePostText(properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                        \"outputText\": obj.message,\n                    });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        };\n        \n        var body = {\n            inputText: properties[\"inputText\"].toString()\n        };\n\n        xhr.open(\"POST\", `https://runtime.lex.${configuration[\"AwsRegion\"]}.amazonaws.com/bot/${configuration[\"BotName\"]}/alias/${configuration[\"BotAlias\"]}/user/${configuration[\"UserID\"]}/text`);\n        xhr.setRequestHeader('Authorization', `AWS4-HMAC-SHA256 Credential=${configuration[\"UserID\"]}/${getDateStamp()}/${configuration[\"AwsRegion\"]}/lex/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=${getSignatureKey()}`);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify(body));\n    });\n}"],"names":["metadata","systemName","displayName","description","configuration","type","value","crypto","require","getDateStamp","date","Date","getFullYear","toString","getMonth","slice","getDate","ondescribe","async","postSchema","objects","properties","methods","inputs","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","message","e","kDate","kRegion","kService","body","inputText","open","setRequestHeader","HmacSHA256","send","stringify","onexecutePostText","onexecuteMessage"],"mappings":"YAEAA,SAAW,CACPC,WAAY,kBACZC,YAAa,yBACbC,YAAa,yBACbC,cAAe,WACE,CACTF,YAAa,aACbG,KAAM,SACNC,MAAO,qBAEA,CACPJ,YAAa,WACbG,KAAM,SACNC,MAAO,0BAEC,CACRJ,YAAa,WACbG,KAAM,SACNC,MAAO,wBAED,CACNJ,YAAa,UACbG,KAAM,SACNC,MAAO,0BAKnB,IAAIC,EAASC,QAAQ,aAErB,SAASC,QAEDC,EAAO,IAAIC,YAERD,EAAKE,cAAcC,YAAc,KAAOH,EAAKI,WAAW,IAAIC,OAAO,GAAGF,YAAc,IAAMH,EAAKM,WAAWD,OAAO,GAY5HE,WAAaC,gBAAed,cAACA,IACzBe,WAAW,CACPC,QAAS,SACM,CACPlB,YAAa,UACbC,YAAa,0BACbkB,WAAY,WACK,CACTnB,YAAa,aACbG,KAAM,qBAEI,CACVH,YAAa,cACbG,KAAM,WAGdiB,QAAS,UACO,CACRpB,YAAa,YACbG,KAAM,UACNkB,OAAQ,CAAE,aACVC,QAAS,CAAE,qBAQnCC,UAAYP,gBAAeQ,WAACA,EAADC,WAAaA,EAAbC,WAAyBA,EAAzBP,WAAqCA,EAArCjB,cAAiDA,EAAjDyB,OAAgEA,WAC/EH,OAEC,gBAKbR,eAAgCS,EAAoBN,EAA0BO,EAA0BxB,UAC5FuB,OAEC,iBAKb,SAA2BN,EAA0BjB,UAC1C,IAAI0B,QAAc,CAACC,EAASC,SAE3BC,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,kBAEM,IAAnBF,EAAIG,WAAkB,UACP,MAAfH,EAAII,OAAgB,MAAM,IAAIC,MAAM,sBAAwBL,EAAII,YAEhEE,EAAMC,KAAKC,MAAMR,EAAIS,cACzBC,WAAW,YACWJ,EAAIK,UAE1Bb,IACF,MAAOc,GACLb,EAAOa,SApEfC,EACAC,EACAC,EAsEIC,EAAO,CACPC,UAAW7B,EAAU,UAAcR,YAGvCoB,EAAIkB,KAAK,OAAS,uBAAsB/C,EAAa,+BAAmCA,EAAa,iBAAqBA,EAAa,iBAAqBA,EAAa,eACzK6B,EAAImB,iBAAiB,gBAAkB,+BAA8BhD,EAAa,UAAcK,OAAkBL,EAAa,6FA7E/H0C,EAAQvC,EAAO8C,WAAW5C,IAAgB,OAAST,SAASI,cAAT,QACnD2C,EAAUxC,EAAO8C,WAAWrD,SAASI,cAAT,UAAqC0C,GACjEE,EAAWzC,EAAO8C,WAAW,MAAON,GACzBxC,EAAO8C,WAAW,eAAgBL,MA2E7Cf,EAAImB,iBAAiB,eAAgB,oBACrCnB,EAAIqB,KAAKd,KAAKe,UAAUN,MA/BDO,CAAkBnC,EAAYjB,uBACtC,IAAIkC,MAAM,cAAgBX,EAAa,uBAThC8B,CAAiB9B,EAAYN,EAAYO,EAAYxB,uBAC5D,IAAIkC,MAAM,cAAgBZ,EAAa"}