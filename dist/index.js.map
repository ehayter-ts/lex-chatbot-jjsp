{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    systemName: \"AWS_Lex_ChatBot\",\n    displayName: \"AWS Lex ChatBot Broker\",\n    description: \"AWS Lex ChatBot Broker\",\n    configuration: {\n        \"AwsRegion\": {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            value: \"eu-west-2\"\n        },\n        \"BotName\": {\n            displayName: \"Bot Name\",\n            type: \"string\",\n            value: \"MedicalBotNHS\"\n        },\n        \"BotAlias\": {\n            displayName: \"Bot Name\",\n            type: \"string\",\n            value: \"latestversion\"\n        },\n        \"UserID\": {\n            displayName: \"User ID\",\n            type: \"string\",\n            value: \"AKIARXLDA4AZB24QPA72\"\n        }\n    }\n};\n\n//var crypto = require(\"crypto-js\");\n\nfunction getDateStamp()\n{\n    var date = new Date();\n\n    return date.getFullYear().toString() + ('0' + (date.getMonth()+1)).slice(-2).toString() + ('0' + date.getDate()).slice(-2);\n}\n\nfunction getSignatureKey() {\n    //var kDate = crypto.HmacSHA256(getDateStamp(), \"AWS4\" + metadata.configuration[\"UserID\"]);\n    //var kRegion = crypto.HmacSHA256(metadata.configuration[\"AwsRegion\"], kDate);\n    //var kService = crypto.HmacSHA256(\"lex\", kRegion);\n    //var kSigning = crypto.HmacSHA256(\"aws4_request\", kService);\n\n    return \"dc6f5ddf6df53218de4142803eadfe8649f6e718a2d7b01a3e509bb8452fb52e\";//kSigning;\n}\n\nondescribe = async function({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"Message\": {\n                displayName: \"Message\",\n                description: \"Represents a text reply\",\n                properties: {\n                    \"inputText\": {\n                        displayName: \"Input Text\",\n                        type: \"string\"\n                    },\n                    \"outputText\": {\n                        displayName: \"Output Text\",\n                        type: \"string\"\n                    }\n                },\n                methods: {\n                    \"postText\": {\n                        displayName: \"Post Text\",\n                        type: \"execute\",\n                        inputs: [ \"inputText\" ],\n                        outputs: [ \"outputText\" ]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\n    switch (objectName)\n    {\n        case \"message\": await onexecuteMessage(methodName, properties, parameters, configuration); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteMessage(methodName: string, properties: SingleRecord, parameters: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case \"postText\": await onexecutePostText(properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecutePostText(properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                        \"outputText\": obj.message,\n                    });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        };\n        \n        var body = {\n            inputText: properties[\"inputText\"].toString()\n        };\n\n        xhr.open(\"POST\", `https://runtime.lex.${configuration[\"AwsRegion\"]}.amazonaws.com/bot/${configuration[\"BotName\"]}/alias/${configuration[\"BotAlias\"]}/user/${configuration[\"UserID\"]}/text`);\n        xhr.setRequestHeader('Authorization', `AWS4-HMAC-SHA256 Credential=${configuration[\"UserID\"]}/20201021/${configuration[\"AwsRegion\"]}/lex/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=${getSignatureKey()}`);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.setRequestHeader('X-Amz-Date', '20201021T181745Z');\n        xhr.setRequestHeader('X-Amz-Content-Sha256', 'beaead3198f7da1e70d03ab969765e0821b24fc913697e929e726aeaebf0eba3');\n        xhr.send(JSON.stringify(body));\n    });\n}"],"names":["metadata","systemName","displayName","description","configuration","type","value","ondescribe","async","postSchema","objects","properties","methods","inputs","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","message","e","body","inputText","toString","open","setRequestHeader","send","stringify","onexecutePostText","onexecuteMessage"],"mappings":"AAEAA,SAAW,CACPC,WAAY,kBACZC,YAAa,yBACbC,YAAa,yBACbC,cAAe,WACE,CACTF,YAAa,aACbG,KAAM,SACNC,MAAO,qBAEA,CACPJ,YAAa,WACbG,KAAM,SACNC,MAAO,0BAEC,CACRJ,YAAa,WACbG,KAAM,SACNC,MAAO,wBAED,CACNJ,YAAa,UACbG,KAAM,SACNC,MAAO,0BAuBnBC,WAAaC,gBAAeJ,cAACA,IACzBK,WAAW,CACPC,QAAS,SACM,CACPR,YAAa,UACbC,YAAa,0BACbQ,WAAY,WACK,CACTT,YAAa,aACbG,KAAM,qBAEI,CACVH,YAAa,cACbG,KAAM,WAGdO,QAAS,UACO,CACRV,YAAa,YACbG,KAAM,UACNQ,OAAQ,CAAE,aACVC,QAAS,CAAE,qBAQnCC,UAAYP,gBAAeQ,WAACA,EAADC,WAAaA,EAAbC,WAAyBA,EAAzBP,WAAqCA,EAArCP,cAAiDA,EAAjDe,OAAgEA,WAC/EH,OAEC,gBAKbR,eAAgCS,EAAoBN,EAA0BO,EAA0Bd,UAC5Fa,OAEC,iBAKb,SAA2BN,EAA0BP,UAC1C,IAAIgB,QAAc,CAACC,EAASC,SAE3BC,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,kBAEM,IAAnBF,EAAIG,WAAkB,UACP,MAAfH,EAAII,OAAgB,MAAM,IAAIC,MAAM,sBAAwBL,EAAII,YAEhEE,EAAMC,KAAKC,MAAMR,EAAIS,cACzBC,WAAW,YACWJ,EAAIK,UAE1Bb,IACF,MAAOc,GACLb,EAAOa,SAIXC,EAAO,CACPC,UAAW1B,EAAU,UAAc2B,YAGvCf,EAAIgB,KAAK,OAAS,uBAAsBnC,EAAa,+BAAmCA,EAAa,iBAAqBA,EAAa,iBAAqBA,EAAa,eACzKmB,EAAIiB,iBAAiB,gBAAkB,+BAA8BpC,EAAa,mBAAuBA,EAAa,8JACtHmB,EAAIiB,iBAAiB,eAAgB,oBACrCjB,EAAIiB,iBAAiB,aAAc,oBACnCjB,EAAIiB,iBAAiB,uBAAwB,oEAC7CjB,EAAIkB,KAAKX,KAAKY,UAAUN,MAjCDO,CAAkBhC,EAAYP,uBACtC,IAAIwB,MAAM,cAAgBX,EAAa,uBAThC2B,CAAiB3B,EAAYN,EAAYO,EAAYd,uBAC5D,IAAIwB,MAAM,cAAgBZ,EAAa"}